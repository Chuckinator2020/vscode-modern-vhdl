# Copyright (c) 2019 Rich J. Young

# --------------------------------------------------
# Design File Primary/Secondary Units
# --------------------------------------------------

ieee_imports:
  prefix: ieee
  description: IEEE Standard Packages
  scope: source.vhdl
  body:
    - LIBRARY IEEE;
    - USE IEEE.std_logic_1164.all;
    - USE IEEE.numeric_std.all;

entity_declaration:
  prefix: ent
  description: Entity Declaration
  scope: source.vhdl
  body:
    - "ENTITY ${1:$TM_FILENAME_BASE} is"
    - "\tPORT ("
    - "\t\t$0"
    - "\t);"
    - "END ${1:$TM_FILENAME_BASE};"

architecture_declaration:
  prefix: arch
  description: Architecture Declaration
  scope: source.vhdl
  body:
    - "ARCHITECTURE ${1:rtl} OF ${2:$TM_FILENAME_BASE} IS"
    - "\t"
    - "BEGIN"
    - "\t"
    - "\t$0"
    - "\t"
    - "END ${1:rtl};"

configuration_declaration:
  prefix: conf
  description: Configuration Declaration
  scope: source.vhdl
  body:
    - "CONFIGURATION ${1:rtl} OF ${2:$TM_FILENAME_BASE} IS"
    - "\t"
    - "\t$0"
    - "\t"
    - "END ${1:rtl};"

package_declaration:
  prefix: pack
  description: Package Declaration
  scope: source.vhdl
  body:
    - "PACKAGE ${1:$TM_FILENAME_BASE} IS"
    - "\t"
    - "\t$0"
    - "\t"
    - "END ${1:$TM_FILENAME_BASE};"

package_body_declaration:
  prefix: pack
  description: Package Body Declaration
  scope: source.vhdl
  body:
    - "PACKAGE BODY ${1:$TM_FILENAME_BASE} IS"
    - "\t"
    - "\t$0"
    - "\t"
    - "END ${1:$TM_FILENAME_BASE};"

# --------------------------------------------------
# Language Constructs
# --------------------------------------------------

case:
  prefix: case
  description: Case Statement
  scope: source.vhdl
  body:
    - "CASE ${1:expression} IS"
    - "\tWHEN ${2:choice} =>"
    - "\t\t$0"
    - ""
    - "\tWHEN others =>"
    - "\t\t"
    - ""
    - "END;"

case_generate:
  prefix: case
  description: Case Generate Statement
  scope: source.vhdl
  body:
    - "${1:generate_label}: CASE ${2:expression} GENERATE"
    - "\tWHEN ${3:choice} =>"
    - "\t\t$0"
    - ""
    - "\tWHEN others =>"
    - "\t\tnull;"
    - ""
    - "END $1;"

if:
  prefix: if
  description: If Statement
  scope: source.vhdl
  body:
    - "if ${1:condition} then"
    - "\t$0"
    - "end if;"

if_generate:
  prefix: if
  description: If Generate Statement
  scope: source.vhdl
  body:
    - "${1:generate_label}: if ${2:condition} generate"
    - "\t$0"
    - "end generate $1;"

for:
  prefix: for
  description: For Loop
  scope: source.vhdl
  body:
    - "for ${1:loop_var} in ${2:range} loop"
    - "\t$0"
    - "end loop;"

for_generate:
  prefix: for
  description: For Generate
  scope: source.vhdl
  body:
    - "${1:generate_label}: for ${2:iteration} generate"
    - "\t$0"
    - "end generate $1;"

assert:
  prefix: assert
  description: Assertion
  scope: source.vhdl
  body:
    - "assert ${1:neg_condition} report ${2:message} severity ${3|note,warning,error,failure|};"

enumeration_type:
  prefix: typeenum
  description: Enumeration type declaration
  scope: source.vhdl
  body:
    - "type ${1:type_name} is (${0});"

array_type:
  prefix: typearray
  description: Array type declaration
  scope: source.vhdl
  body:
    - "type ${1:type_name} is array (${2:range}) of ${3:element_type};"

record_type:
  prefix: typerecord
  description: Record type declaration
  scope: source.vhdl
  body:
    - "type ${1:type_name} is record"
    - "\t${0}"
    - "end record ${1:type_name};"

subtype:
  prefix: subt
  description: Subtype declaration
  scope: source.vhdl
  body:
    - "subtype ${1:subtype_name} is ${2:base_type} range ${3:0} ${4|to,downto|} ${5:7};"

# --------------------------------------------------
# Process
# --------------------------------------------------

testbench_process:
  prefix: tproc, processt
  description: Testbench Process (No Sensitivity List) 
  scope: source.vhdl
  body:
    - "${1:proc_name}: PROCESS"
    - "BEGIN"
    - "\t$0"
    - "END $1;"

combinational_process :
  prefix: cproc, processc
  description: Combinational Process 
  scope: source.vhdl
  body:
    - "${1:proc_name}: PROCESS(${2:sensitivity_list})"
    - "BEGIN"
    - "\t$0"
    - "END $1;"

asynchronous_reset_clocked_process :
  prefix: aproc, processa
  description: Clocked Process (Asynchronous Reset)  
  scope: source.vhdl
  body:
    - "${1:proc_name}: PROCESS(${3:clk}, ${4:rst})"
    - "BEGIN"
    - "\tIF ${4:rst} = ${5:rst_val} THEN"
    - "\t\t$0"
    - "\tELSIF ${2|rising_edge,falling_edge|}(${3:clk}) THEN"
    - "\t\t"
    - "\tEND IF;"
    - "END $1;"

synchronous_reset_clocked_process :
  prefix: sproc, processs
  description: Clocked Process (Synchronous Reset)  
  scope: source.vhdl
  body:
    - "${1:proc_name}: PROCESS(${3:clk})"
    - "BEGIN"
    - "\tIF ${2|rising_edge,falling_edge|}(${3:clk}) THEN"
    - "\t\tIF ${4:rst} = ${5:rst_val} THEN"
    - "\t\t\t$0"
    - "\t\tELSE"
    - "\t\t\t"
    - "\t\tEND IF;"
    - "\tEND IF;"
    - "END $1;"

# --------------------------------------------------
# Others
# --------------------------------------------------

std_logic_vector:
  prefix: std
  description: std_logic_vector Type
  scope: source.vhdl
  body: std_logic_vector(${1:7} ${2|downto,to|} ${3:0})

std_ulogic_vector:
  prefix: stdu
  description: std_ulogic_vector Type
  scope: source.vhdl
  body: std_ulogic_vector(${1:7} ${2|downto,to|} ${3:0})

signed:
  prefix: si
  description: signed Type
  scope: source.vhdl
  body: signed(${1:7} ${2|downto,to|} ${3:0})

unsigned:
  prefix: uns
  description: unsigned Type
  scope: source.vhdl
  body: unsigned(${1:7} ${2|downto,to|} ${3:0})

zeroes:
  prefix: oth
  description: Zero Others
  scope: source.vhdl
  body: "others => '0'"

integer_range_limitation:
  prefix: intr
  description: Integer (Range Limitation)
  scope: source.vhdl
  body: "integer range ${1:0} ${2|downto,to|} ${3:255}"
